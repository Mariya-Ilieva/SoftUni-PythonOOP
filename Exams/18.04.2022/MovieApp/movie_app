from Exam18April2022.MovieApp.user import User
from Exam18April2022.MovieApp.movie_specification.movie import Movie


class MovieApp:
    def __init__(self):
        self.movies_collection = []
        self.users_collection = []

    def register_user(self, username: str, age: int):
        user1 = [u for u in self.users_collection if u.username == username]
        if user1:
            raise Exception('User already exists!')
        user = User(username, age)
        self.users_collection.append(user)
        return f'{username} registered successfully.'

    def upload_movie(self, username: str, movie: Movie):
        user = [u for u in self.users_collection if u.username == username]
        if not user:
            raise Exception('This user does not exist!')
        if movie in self.movies_collection:
            raise Exception('Movie already added to the collection!')
        if movie.owner.username != username:
            raise Exception(f'{username} is not the owner of the movie {movie.title}!')
        self.movies_collection.append(movie)
        user[0].movies_owned.append(movie)
        return f'{username} successfully added {movie.title} movie.'

    def edit_movie(self, username: str, movie: Movie, **kwargs):
        user = [u for u in self.users_collection if u.username == username]
        if movie not in self.movies_collection:
            raise Exception(f'The movie {movie.title} is not uploaded!')
        if movie not in user[0].movies_owned:
            raise Exception(f'{username} is not the owner of the movie {movie.title}!')
        for k, v in kwargs.items():
            setattr(movie, k, v)
        return f'{username} successfully edited {movie.title} movie.'

    def delete_movie(self, username: str, movie: Movie):
        user = [u for u in self.users_collection if u.username == username]
        if movie not in self.movies_collection:
            raise Exception(f'The movie {movie.title} is not uploaded!')
        if movie not in user[0].movies_owned:
            raise Exception(f'{username} is not the owner of the movie {movie.title}!')
        self.movies_collection.remove(movie)
        user[0].movies_owned.remove(movie)
        return f'{username} successfully deleted {movie.title} movie.'

    def like_movie(self, username: str, movie: Movie):
        user = [u for u in self.users_collection if u.username == username]
        if movie in user[0].movies_owned:
            raise Exception(f'{username} is the owner of the movie {movie.title}!')
        if movie in user[0].movies_liked:
            raise Exception(f'{username} already liked the movie {movie.title}!')
        movie.likes += 1
        user[0].movies_liked.append(movie)
        return f'{username} liked {movie.title} movie.'

    def dislike_movie(self, username: str, movie: Movie):
        user = [u for u in self.users_collection if u.username == username]
        if movie not in user[0].movies_liked:
            raise Exception(f'{username} has not liked the movie {movie.title}!')
        movie.likes -= 1
        user[0].movies_liked.remove(movie)
        return f'{username} disliked {movie.title} movie.'

    def display_movies(self):
        if not self.movies_collection:
            return 'No movies found.'
        else:
            output = ''
            for movie in sorted(self.movies_collection, key=lambda x: (-x.year, x.title)):
                output += movie.details() + '\n'
            return output.strip()

    def __str__(self):
        res_users = [u.username for u in self.users_collection]
        res_movies = [m.title for m in self.movies_collection]
        output = 'All users: '
        if not self.users_collection:
            output += 'No users.\n'
        else:
            output += ', '.join(res_users) + '\n'
        output += 'All movies: '
        if not self.movies_collection:
            output += 'No movies.'
        else:
            output += ', '.join(res_movies)
        return output
