from HorseRacings.horse_race import HorseRace
from HorseRacings.horse_specification.appaloosa import Appaloosa
from HorseRacings.horse_specification.thoroughbred import Thoroughbred
from HorseRacings.jockey import Jockey


class HorseRaceApp:
    def __init__(self):
        self.horses = []
        self.jockeys = []
        self.horse_races = []

    def add_horse(self, horse_type: str, horse_name: str, horse_speed: int):
        valid = {'Appaloosa': Appaloosa, 'Thoroughbred': Thoroughbred}
        horses_names = [h.name for h in self.horses]
        if horse_name in horses_names:
            raise Exception(f'Horse {horse_name} has been already added!')
        if horse_type in valid.keys():
            self.horses.append(valid[horse_type](horse_name, horse_speed))
            return f'{horse_type} horse {horse_name} is added.'

    def add_jockey(self, jockey_name: str, age: int):
        jockeys_names = [j.name for j in self.jockeys]
        if jockey_name in jockeys_names:
            raise Exception(f'Jockey {jockey_name} has been already added!')
        self.jockeys.append(Jockey(jockey_name, age))
        return f'Jockey {jockey_name} is added.'

    def create_horse_race(self, race_type: str):
        race_types = [r.race_type for r in self.horse_races]
        if race_type in race_types:
            raise Exception(f'Race {race_type} has been already created!')
        self.horse_races.append(HorseRace(race_type))
        return f'Race {race_type} is created.'

    def add_horse_to_jockey(self, jockey_name: str, horse_type: str):
        horse = None
        jockey = [j for j in self.jockeys if j.name == jockey_name]
        if not jockey:
            raise Exception(f'Jockey {jockey_name} could not be found!')
        for idx in range(len(self.horses) - 1, -1, -1):
            if self.horses[idx].__class__.__name__ == horse_type and not self.horses[idx].is_taken:
                horse = self.horses[idx]
                break
        if not horse:
            raise Exception(f'Horse breed {horse_type} could not be found!')
        if horse and jockey[0].horse is not None:
            return f'Jockey {jockey_name} already has a horse.'
        horse.is_taken = True
        jockey[0].horse = horse
        return f'Jockey {jockey_name} will ride the horse {horse.name}.'

    def add_jockey_to_horse_race(self, race_type: str, jockey_name: str):
        jockey = [j for j in self.jockeys if j.name == jockey_name]
        race = [r for r in self.horse_races if r.race_type == race_type]
        if not race:
            raise Exception(f'Race {race_type} could not be found!')
        if not jockey:
            raise Exception(f'Jockey {jockey_name} could not be found!')
        if jockey[0].horse is None:
            raise Exception(f'Jockey {jockey_name} cannot race without a horse!')
        if jockey in race[0].jockeys:
            return f'Jockey {jockey_name} has been already added to the {race_type} race.'
        if jockey and race and jockey[0].horse is not None:
            race[0].jockeys.append(jockey)
            return f'Jockey {jockey_name} added to the {race_type} race.'

    def start_horse_race(self, race_type: str):
        race = [r for r in self.horse_races if r.race_type == race_type]
        if not race:
            raise Exception(f'Race {race_type} could not be found!')
        if len(race[0].jockeys) < 2:
            raise Exception(f'Horse race {race_type} needs at least two participants!')
        winner = sorted(self.jockeys, key=lambda x: x.horse.speed)[-1]
        return f'The winner of the {race_type} race, with a speed of {winner.horse.speed}km/h is ' \
               f'{winner.name}! Winner\'s horse: {winner.horse.name}.'
