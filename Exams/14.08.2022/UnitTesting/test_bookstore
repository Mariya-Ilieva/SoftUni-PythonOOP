from unittest import TestCase, main
from Bookstore import Bookstore


class TestBookStore(TestCase):
    def test_initialised_correctly(self):
        bookstore = Bookstore(100)
        self.assertEqual(100, bookstore.books_limit)
        self.assertEqual({}, bookstore.availability_in_store_by_book_titles)
        self.assertEqual(0, bookstore.total_sold_books)

    def test_books_limit_raises(self):
        with self.assertRaises(ValueError) as ve:
            Bookstore(0)
        self.assertEqual('Books limit of 0 is not valid', str(ve.exception))
        with self.assertRaises(ValueError) as ve:
            Bookstore(-15)
        self.assertEqual('Books limit of -15 is not valid', str(ve.exception))

    def test_len_method(self):
        bookstore = Bookstore(100)
        bookstore.availability_in_store_by_book_titles = {'Harry Potter': 5, 'Anna Karenina': 3}
        self.assertEqual(8, len(bookstore))

    def test_receive_book_method_raises(self):
        bookstore = Bookstore(100)
        with self.assertRaises(Exception) as ex:
            bookstore.receive_book('Harry Potter', 101)
        self.assertEqual('Books limit is reached. Cannot receive more books!', str(ex.exception))

    def test_receive_book_method_correct(self):
        bookstore = Bookstore(100)
        bookstore.receive_book('Harry Potter', 3)
        self.assertEqual({'Harry Potter': 3}, bookstore.availability_in_store_by_book_titles)
        bookstore.receive_book('Harry Potter', 2)
        self.assertEqual({'Harry Potter': 5}, bookstore.availability_in_store_by_book_titles)
        self.assertEqual('7 copies of Harry Potter are available in the bookstore.',
                         bookstore.receive_book('Harry Potter', 2))

    def test_sell_book_method_raises(self):
        bookstore = Bookstore(100)
        bookstore.receive_book('Harry Potter', 3)
        with self.assertRaises(Exception) as ex:
            bookstore.sell_book('Anna Karenina', 2)
        self.assertEqual('Book Anna Karenina doesn\'t exist!', str(ex.exception))
        with self.assertRaises(Exception) as ex:
            bookstore.sell_book('Harry Potter', 5)
        self.assertEqual('Harry Potter has not enough copies to sell. Left: 3', str(ex.exception))

    def test_sell_book_method_correct(self):
        bookstore = Bookstore(100)
        bookstore.receive_book('Harry Potter', 3)
        bookstore.sell_book('Harry Potter', 2)
        self.assertEqual({'Harry Potter': 1}, bookstore.availability_in_store_by_book_titles)
        self.assertEqual(2, bookstore.total_sold_books)
        self.assertEqual('Sold 1 copies of Harry Potter', bookstore.sell_book('Harry Potter', 1))
        self.assertEqual(3, bookstore.total_sold_books)

    def test_str_method(self):
        bookstore = Bookstore(100)
        bookstore.receive_book('Harry Potter', 3)
        bookstore.receive_book('Harry Potter', 3)
        bookstore.sell_book('Harry Potter', 3)
        bookstore.sell_book('Harry Potter', 2)
        result = f'Total sold books: 5\nCurrent availability: 1\n - Harry Potter: 1 copies'
        self.assertEqual(result, str(bookstore))


if __name__ == '__main__':
    main()
