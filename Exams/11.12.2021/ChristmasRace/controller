from Exam11December2021.ChristmasRace.car.muscle_car import MuscleCar
from Exam11December2021.ChristmasRace.car.sports_car import SportsCar
from Exam11December2021.ChristmasRace.driver import Driver
from Exam11December2021.ChristmasRace.race import Race


class Controller:
    def __init__(self):
        self.cars = []
        self.drivers = []
        self.races = []

    def create_car(self, car_type: str, model: str, speed_limit: int):
        valid = {'MuscleCar': MuscleCar, 'SportsCar': SportsCar}
        car = [c for c in self.cars if c.model == model]
        if car:
            raise Exception(f'Car {model} is already created!')
        if car_type in valid:
            self.cars.append(valid[car_type](model, speed_limit))
            return f'{car_type} {model} is created.'

    def create_driver(self, driver_name: str):
        driver = [d for d in self.drivers if d.name == driver_name]
        if driver:
            raise Exception(f'Driver {driver_name} is already created!')
        self.drivers.append(Driver(driver_name))
        return f'Driver {driver_name} is created.'

    def create_race(self, race_name: str):
        race = [r for r in self.races if r.name == race_name]
        if race:
            raise Exception(f'Race {race_name} is already created!')
        self.races.append(Race(race_name))
        return f'Race {race_name} is created.'

    def add_car_to_driver(self, driver_name: str, car_type: str):
        driver = [d for d in self.drivers if d.name == driver_name]
        car = [c for c in self.cars if c.__class__.__name__ == car_type and not c.is_taken]
        if not driver:
            raise Exception(f'Driver {driver_name} could not be found!')
        if not car:
            raise Exception(f'Car {car_type} could not be found!')
        if car and driver and driver[0].car:
            driver[0].car.is_taken = False
            old = driver[0].car.model
            driver[0].car = car[-1]
            car[-1].is_taken = True
            return f'Driver {driver_name} changed his car from {old} to {car[-1].model}.'
        driver[0].car = car[-1]
        car[-1].is_taken = True
        return f'Driver {driver_name} chose the car {car[-1].model}.'

    def add_driver_to_race(self, race_name: str, driver_name: str):
        race = [r for r in self.races if r.name == race_name]
        driver = [d for d in self.drivers if d.name == driver_name]
        if not race:
            raise Exception(f'Race {race_name} could not be found!')
        if not driver:
            raise Exception(f'Driver {driver_name} could not be found!')
        if not driver[0].car:
            raise Exception(f'Driver {driver_name} could not participate in the race!')
        if race and driver and driver[0].car:
            if driver[0] in race[0].drivers:
                return f'Driver {driver_name} is already added in {race_name} race.'
            race[0].drivers.append(driver[0])
            return f'Driver {driver_name} added in {race_name} race.'

    def start_race(self, race_name: str):
        race = [r for r in self.races if r.name == race_name]
        if not race:
            raise Exception(f'Race {race_name} could not be found!')
        if len(race[0].drivers) < 3:
            raise Exception(f'Race {race_name} cannot start with less than 3 participants!')
        if race and len(race[0].drivers) >= 3:
            participants = sorted(race[0].drivers, key=lambda x: -x.car.speed_limit)[:3]
            output = ''
            for driver in participants:
                driver.number_of_wins += 1
                output += f'Driver {driver.name} wins the {race_name} race with a speed of {driver.car.speed_limit}.\n'
            return output.strip()
