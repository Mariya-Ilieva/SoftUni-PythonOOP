from abc import ABC, abstractmethod

from Exam10April2021.AquaShop.decoration.base_decoration import BaseDecoration
from Exam10April2021.AquaShop.fish.base_fish import BaseFish


class BaseAquarium(ABC):
    @abstractmethod
    def __init__(self, name: str, capacity: int):
        self.name = name
        self.capacity = capacity
        self.decorations = []
        self.fish = []

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        if value == '':
            raise ValueError('Aquarium name cannot be an empty string.')
        self.__name = value

    def calculate_comfort(self):
        return sum([d.comfort for d in self.decorations])

    def add_fish(self, fish: BaseFish):
        if len(self.fish) >= self.capacity:
            return 'Not enough capacity.'
        self.fish.append(fish)
        return f'Successfully added {fish.__class__.__name__} to {self.name}.'

    def remove_fish(self, fish: BaseFish):
        if fish in self.fish:
            self.fish.remove(fish)

    def add_decoration(self, decoration: BaseDecoration):
        self.decorations.append(decoration)

    def feed(self):
        for f in self.fish:
            f.eat()

    def __str__(self):
        output = f'{self.name}:\nFish: '
        output += 'none' if len(self.fish) == 0 else ' '.join([f.name for f in self.fish])
        output += f'\nDecorations: {len(self.decorations)}'
        output += f'\nComfort: {self.calculate_comfort()}'
        return output
