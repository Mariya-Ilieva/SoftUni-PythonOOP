from unittest import TestCase, main
from Exam16Aug2020.paint_factory import PaintFactory


class TestPaintFactory(TestCase):
    def test_initialized_correctly(self):
        paint_factory = PaintFactory('Nestle', 20)
        self.assertEqual('Nestle', paint_factory.name)
        self.assertEqual(20, paint_factory.capacity)
        self.assertEqual(["white", "yellow", "blue", "green", "red"], paint_factory.valid_ingredients)
        self.assertEqual({}, paint_factory.ingredients)

    def test_add_ingredient_raises_type_error(self):
        paint_factory = PaintFactory('Nestle', 20)
        with self.assertRaises(TypeError) as te:
            paint_factory.add_ingredient('brown', 15)
        self.assertEqual('Ingredient of type brown not allowed in PaintFactory', str(te.exception))

    def test_add_ingredient_raises_value_error(self):
        paint_factory = PaintFactory('Nestle', 20)
        with self.assertRaises(ValueError) as ve:
            paint_factory.add_ingredient('blue', 30)
        self.assertEqual('Not enough space in factory', str(ve.exception))

    def test_add_ingredient_correct(self):
        paint_factory = PaintFactory('Nestle', 20)
        paint_factory.add_ingredient('white', 8)
        self.assertEqual({'white': 8}, paint_factory.ingredients)
        paint_factory.add_ingredient('white', 3)
        self.assertEqual({'white': 11}, paint_factory.ingredients)

    def test_remove_ingredient_raises_key_error(self):
        paint_factory = PaintFactory('Nestle', 20)
        with self.assertRaises(KeyError) as ke:
            paint_factory.remove_ingredient('brown', 15)
        self.assertEqual('No such ingredient in the factory', str(ke.exception))

    def test_remove_ingredient_raises_value_error(self):
        paint_factory = PaintFactory('Nestle', 20)
        paint_factory.add_ingredient('white', 8)
        with self.assertRaises(ValueError) as ve:
            paint_factory.remove_ingredient('white', 25)
        self.assertEqual('Ingredients quantity cannot be less than zero', str(ve.exception))

    def test_remove_ingredient_correct(self):
        paint_factory = PaintFactory('Nestle', 20)
        paint_factory.add_ingredient('white', 8)
        self.assertEqual({'white': 8}, paint_factory.ingredients)
        paint_factory.remove_ingredient('white', 5)
        self.assertEqual({'white': 3}, paint_factory.ingredients)

    def test_products_method(self):
        paint_factory = PaintFactory('Nestle', 20)
        self.assertEqual({}, paint_factory.products)
        paint_factory.add_ingredient('yellow', 4)
        self.assertEqual({'yellow': 4}, paint_factory.products)
        paint_factory.add_ingredient('blue', 6)
        self.assertEqual({'yellow': 4, 'blue': 6}, paint_factory.products)

    def test_can_add_method(self):
        paint_factory = PaintFactory('Nestle', 20)
        self.assertTrue(paint_factory.can_add(8))
        self.assertFalse(paint_factory.can_add(25))

    def test_repr_method(self):
        paint_factory = PaintFactory('Nestle', 20)
        paint_factory.add_ingredient('green', 5)
        paint_factory.add_ingredient('red', 4)
        self.assertEqual('Factory name: Nestle with capacity 20.\ngreen: 5\nred: 4', paint_factory.__repr__())


if __name__ == '__main__':
    main()
