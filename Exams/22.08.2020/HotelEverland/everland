from Exam22Aug2020.HotelEverland.rooms.room import Room


class Everland:
    def __init__(self):
        self.rooms = []

    def add_room(self, room: Room):
        self.rooms.append(room)

    def get_monthly_consumptions(self):
        total_consumption = sum((r.expenses + r.room_cost) for r in self.rooms)
        return f'Monthly consumption: {total_consumption:.2f}$.'

    def pay(self):
        output = ''
        for r in self.rooms:
            if r.budget >= r.expenses + r.room_cost:
                r.budget -= r.expenses + r.room_cost
                output += f'{r.family_name} paid {(r.expenses + r.room_cost):.2f}$ and have {r.budget:.2f}$ left.\n'
            else:
                self.rooms.remove(r)
                output += f'{r.family_name} does not have enough budget and must leave the hotel.\n'
        return output.strip()

    def status(self):
        output = f'Total population: {sum([r.members_count for r in self.rooms])}\n'
        for r in self.rooms:
            output += f'{r.family_name} with {r.members_count} members. Budget: {r.budget:.2f}$, ' \
                      f'Expenses: {r.expenses:.2f}$\n'
            if r.children:
                r.members_count += len(r.children)
                no = 0
                for child in r.children:
                    no += 1
                    output += f'--- Child {no} monthly cost: {child.get_monthly_expense():.2f}$\n'
            if hasattr(r, 'appliances'):
                total_expenses = 0
                for appliance in r.appliances:
                    total_expenses += appliance.get_monthly_expense()
                output += f'--- Appliances monthly cost: {total_expenses:.2f}$\n'
        return output
